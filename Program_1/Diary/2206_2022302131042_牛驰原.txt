2206_2022302131042_牛驰原_0430
第一次实习，任务是从.csv文件中读取信息
遇到的问题：
1.不同的表中信息分隔符，数据类型不同
2.文件读取到末位，不能及时跳出循环，多读一位导致报错
解决办法：
1.先观察每个表中的信息类型，读取不同文件时，使用不同的判断标准，以解决获取信息不到位的问题；
2.添加if补丁，判断读文件是否结束，使用eof（）函数控制读完最后一个数据不再读取。
收获：
在每次的添加断点调试过程中，解决了许多问题，同时也记住了这些问题的产生原因以及解决办法，在以后的编译中，我会多注意这些问题。通过CSDN的查询，更好的掌握了fstream头文件的用法，使得读取文件时解决的问题更多，更全面。

2206_2022302131042_牛驰原_0505
第二次实习，任务是完善读取文件的方法，选择合适的数据结构，以邻接表的形式创建有向图。
遇到的问题：
1.邻接表表结点的个数无法确定；
2.创建表的时候要先存顶点再存边，存边的时候链表容易创建不好。
解决方法：
1.头文件中宏定义MAX_VERTEX_NUM为256，使顶点数不能超过这个界限；
2.对路线结构体中设计到的城市名字符串设计一个Locate函数查找其对应的顶点序号，同时逆向创建链表，间接明了的同时不用开辟多余的空间。
收获：
通过调试对链表的结构了解更深刻了，对逆向创建链表更加熟悉。

2206_2022302131042_牛驰原_0509
第三次实习，任务是实现邻接表的深度遍历
收获：成功实现了对有向图的深度遍历，在调试过程中写一个打印图的函数，容易找到图遍历中出现的问题。

2206_2022302131042_牛驰原_0512
第四次实习，任务是尝试写出最短路径函数解决问题
遇到的问题：
1.如何存储路径
2.更新路径的时候怎么处理
解决办法：
1.定义了一个包括dis距离和path路径的数据结构，其中path是一个二维数组，第一维表示出发点到某个城市的城市号，第二维储存路径沿途城市序号；
2.其中将path[i][0]设置为0或者1用来表示是否找到出发点到i对应城市的路径，将path[i][n]（n为路径的最后一位）设置为-1，每当更新路径的时候，由于新的路径一定比原本路径长（沿途城市多），所以直接将新的路径替换现有路径，并在最后一位添加-1。
收获：
初步理解了迪杰特斯拉算法，能够初步实现最短路径求解问题。

2206_2022302131042_牛驰原_0516
第五次实习，任务是将Dijkstra算法完善并调试正确，将最短路径输出至控制台。
收获：
学会邻接表的Dijkstra算法，对一些可能存在的没有路径的情况进行修补。

2206_2022302131042_牛驰原_0519
第六次实习，任务是实现最短路径的可视化
遇到的问题：
1.如何将htm文件中的内容合理的分块输出；
解决方法：
1.观察示例htm文件代码，将其重叠的部分单独拿出来进行循环打印，并替换需要替换的位置。
收获：
初步了解了htm文件的大概涵盖部分，并最终完成了路径的可视化。

2206_2022302131042_牛驰原_0523
第七次实习，任务是写注释
收获：对之前写的内容进行注释，并且找到了某些存在的问题。

2206_2022302131042_牛驰原_0526
第八次实习，任务是打补丁修改可能存在的问题，并开始着手写实习报告。
遇到的问题：
1.可视化部分，用于一些国家城市名字带有’的字符，与程序的部分语言引起冲突；
2.无法对带有空格符号的城市进行求解最短路径。
解决方法：
1.构造一个返回值为char*的函数，对字符串进行补\反义字符的操作；
2.对输入的地方稍加修改， scanf("%[^\n]", stcity);使用这样的形式进行输入，使得当输入\n的时候才会判断读取控制台输入的内容。
收获：
对控制台输出输入及printf和scanf函数有了更深的理解。

2206_2022302131042_牛驰原_0530
第九次实习，任务是完成对时间复杂度的数据统计和计算，并完成实习报告。
收获：
对时间复杂度有了更深刻的理解，同时完成了实习报告，又一次面对代码，印象更加深刻。
